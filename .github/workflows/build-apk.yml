name: Build and Test APK

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2

jobs:
  # Code Quality Checks
  quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
    
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Run code quality checks
      run: |
        cd android-app
        gradle check --continue
        gradle lintDebug
    
    - name: Upload lint results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lint-results
        path: android-app/app/build/reports/lint-results*.html
        retention-days: 7

  # Build APK
  build:
    runs-on: ubuntu-latest
    needs: quality
    strategy:
      matrix:
        build-type: [debug, release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
    
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Build APK
      run: |
        cd android-app
        if [ "${{ matrix.build-type }}" = "release" ]; then
          gradle assembleRelease
        else
          gradle assembleDebug
        fi
    
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: app-${{ matrix.build-type }}
        path: android-app/app/build/outputs/apk/${{ matrix.build-type }}/app-${{ matrix.build-type }}.apk
        retention-days: 30
    
    - name: Upload mapping file (release only)
      if: matrix.build-type == 'release'
      uses: actions/upload-artifact@v4
      with:
        name: mapping-file
        path: android-app/app/build/outputs/mapping/release/mapping.txt
        retention-days: 30

  # Run Tests
  test:
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
    
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Run unit tests
      run: |
        cd android-app
        gradle testDebugUnitTest --continue
    
    - name: Run instrumented tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 29
        target: google_apis
        arch: x86_64
        profile: Nexus 6
        script: |
          cd android-app
          gradle connectedDebugAndroidTest --continue
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          android-app/app/build/reports/tests/
          android-app/app/build/outputs/androidTest-results/
        retention-days: 7

  # Create Release
  release:
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download APK artifacts
      uses: actions/download-artifact@v4
      with:
        name: app-release
        path: ./apk/
    
    - name: Create Release APK
      run: |
        cd apk
        mv app-release.apk HGAM-Mobile-App-${{ github.event.release.tag_name }}.apk
    
    - name: Upload Release APK
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./apk/HGAM-Mobile-App-${{ github.event.release.tag_name }}.apk
        asset_name: HGAM-Mobile-App-${{ github.event.release.tag_name }}.apk
        asset_content_type: application/vnd.android.package-archive

  # Security Scan
  security:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download APK artifacts
      uses: actions/download-artifact@v4
      with:
        name: app-debug
        path: ./apk/
    
    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'android-app/app/build/reports/security-scan.sarif'
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: android-app/app/build/reports/security-scan.sarif
        retention-days: 30